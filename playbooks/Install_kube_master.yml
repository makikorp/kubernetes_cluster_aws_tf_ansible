---
- name: Install Kubernetes
  hosts: master
  remote_user: ubuntu
  become: true
  vars:
    ansible_ssh_common_args: "-o StrictHostKeyChecking=accept-new"
    ansible_python_interpreter: /usr/bin/python3

  tasks: 

    - name: install aptitude 
      apt:
        name: aptitude
        state: latest
        update_cache: true

    - name: apt-get update
      ansible.builtin.apt:
        update_cache: yes  

    - name: install required packages
      apt:
        pkg:
          - python3
          - python3-pip
          - apt-transport-https
          - ca-certificates
          - software-properties-common
          - curl
          - gnupg
        state: latest
        update_cache: true

    - name: upgrade pip
      pip:
        name: pip
        extra_args: --upgrade

    - name: install python packages
      shell: | 
        pip install openshift 
        pip install --ignore-installed pyyaml 
        pip install kubernetes

    - name: download docker apt key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: add docker to sources.list
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable
        state: present        


    - name: download kubernetes apt key
      ansible.builtin.apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Add kubernetes to sources.list
      ansible.builtin.apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present

    - name: install docker packages
      apt:
        pkg:
          - docker-ce 
          - docker-ce-cli 
          - containerd.io 
          - docker-buildx-plugin 
          - docker-compose-plugin
        state: latest
        update_cache: true

    - name: swapoff
      shell: |
        swapoff -a
        sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

    - name: modules-load.d
      shell: |
        cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
        overlay
        br_netfilter
        EOF

        modprobe overlay
        modprobe br_netfilter

    - name: setup required sysctl parameters
      shell: |
        cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
        net.bridge.bridge-nf-call-ip6tables = 1
        net.bridge.bridge-nf-call-iptables = 1
        net.ipv4.ip_forward                = 1
        EOF

        cat << EOF | tee /etc/sysctl.d/99-kubernetes-cri.conf
        net.bridge.bridge-nf-call-iptables  = 1
        net.ipv4.ip_forward                 = 1
        net.bridge.bridge-nf-call-ip6tables = 1
        EOF

        sysctl --system

    - name: Install CRI
      shell: |
        sudo rm /etc/containerd/config.toml

        cat << EOF | tee /etc/containerd/config.toml
        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]

        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
          SystemdCgroup = true
        EOF

        systemctl restart containerd

    - name: install kubernetes packages
      apt:
        pkg:
          - kubelet
          - kubeadm
          - kubectl
        state: latest
        update_cache: true

    - name: mark hold
      shell: apt-mark hold kubelet kubeadm kubectl

    - name: kubeadm initialization
      shell: kubeadm init --pod-network-cidr 10.0.0.0/16 --apiserver-advertise-address={{ ansible_default_ipv4.address }} > kubeJoin.txt

    - name: kubeadm create join token
      shell: kubeadm token create --print-join-command >> ///home/ubuntu/kubeadm_join_command.sh

    - name: create .kube directory and copy admin.conf to .kube
      shell: |
        mkdir -p /home/ubuntu/.kube
        cp -i /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
        chown $(id -u):$(id -g) /home/ubuntu/.kube/config
        chmod 755 /home/ubuntu/.kube/config

    - name: restart master kubelet
      shell: |
        systemctl daemon-reload
        systemctl restart kubelet



    - name: open ports
      community.general.ufw:
        rule: allow
        port: '22'
        proto: tcp

    - name: open ports Kubernetes API server
      community.general.ufw:
        rule: allow
        port: '6443'
        proto: tcp

    - name: open port kubectl 
      community.general.ufw:
        rule: allow
        port: '8080'
        

    - name: open ports etcd server client API
      community.general.ufw:
        rule: allow
        port: '2379:2380'
        proto: tcp

    - name: open port kublet api
      community.general.ufw:
        rule: allow
        port: '10250'
        proto: tcp

    - name: open port kube scheduler 
      community.general.ufw:
        rule: allow
        port: '10259'
        proto: tcp

    - name: open port kube controller manager
      community.general.ufw:
        rule: allow
        port: '10257'
        proto: tcp

    - name: open ports Node Port Services
      community.general.ufw:
        rule: allow
        port: '30000:32767'
        proto: tcp

    - name: enable ufw
      community.general.ufw:
        state: enabled

